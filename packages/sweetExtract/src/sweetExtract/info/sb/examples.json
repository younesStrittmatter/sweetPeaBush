{
  "htmlchoice": [
    {
      "filename": "htmlChoice.py",
      "relpath": "docs/Stimuli/htmlChoice/htmlChoice.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus import HtmlChoice\n\nchoice = HtmlChoice(\n    duration=2000,\n    html_array=[\"<button>Yes</button>\", \"<button>No</button>\"],\n    values=[1, 0],\n    time_after_response=300,\n)\n\nblock = Block([choice])\n\n# Create HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"htmlChoice.html\")\n"
    }
  ],
  "bandit": [
    {
      "filename": "bandit.py",
      "relpath": "docs/Stimuli/bandit/bandit.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Bandit, Text\nfrom sweetbean.variable import (\n    DataVariable,\n    FunctionVariable,\n    SharedVariable,\n    SideEffect,\n    TimelineVariable,\n)\n\ntimeline = [\n    {\n        \"bandit_1\": {\"color\": \"orange\", \"value\": 10},\n        \"bandit_2\": {\"color\": \"blue\", \"value\": 0},\n        \"bandit_3\": {\"color\": \"red\", \"value\": 5},\n    },\n    {\n        \"bandit_1\": {\"color\": \"orange\", \"value\": 9},\n        \"bandit_2\": {\"color\": \"blue\", \"value\": 1},\n        \"bandit_3\": {\"color\": \"red\", \"value\": 5},\n    },\n    {\n        \"bandit_1\": {\"color\": \"orange\", \"value\": 8},\n        \"bandit_2\": {\"color\": \"blue\", \"value\": 2},\n        \"bandit_3\": {\"color\": \"red\", \"value\": 5},\n    },\n    {\n        \"bandit_1\": {\"color\": \"orange\", \"value\": 7},\n        \"bandit_2\": {\"color\": \"blue\", \"value\": 3},\n        \"bandit_3\": {\"color\": \"red\", \"value\": 5},\n    },\n    {\n        \"bandit_1\": {\"color\": \"orange\", \"value\": 6},\n        \"bandit_2\": {\"color\": \"blue\", \"value\": 4},\n        \"bandit_3\": {\"color\": \"red\", \"value\": 5},\n    },\n]\n\nbandit_1 = TimelineVariable(\"bandit_1\")\nbandit_2 = TimelineVariable(\"bandit_2\")\nbandit_3 = TimelineVariable(\"bandit_3\")\n\nscore = SharedVariable(\"score\", 0)\nvalue = DataVariable(\"value\", 0)\n\nupdate_score = FunctionVariable(\n    \"update_score\", lambda sc, val: sc + val, [score, value]\n)\n\nupdate_score_side_effect = SideEffect(score, update_score)\n\nbandit_task = Bandit(\n    bandits=[bandit_1, bandit_2, bandit_3],\n    side_effects=[update_score_side_effect],\n)\nshow_score = Text(duration=1000, text=score)\n\nblock = Block([bandit_task, show_score], timeline=timeline)\n\n# Create an image of the stimuli sequence of the block\nblock.to_image(\"bandit.png\", [{\"value\": 5}, None], zoom_factor=[1, 3])\n\n# Create HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"bandit.html\")\n"
    }
  ],
  "foraging": [
    {
      "filename": "foraging.py",
      "relpath": "docs/Stimuli/foraging/foraging.py",
      "code": "from sweetbean.block import Block\nfrom sweetbean.experiment import Experiment\nfrom sweetbean.stimulus import Text\nfrom sweetbean.stimulus.Foraging import Foraging\nfrom sweetbean.variable import TimelineVariable\n\n# --- Timeline with per-trial item arrays (targets/distractors) ---\n# Each item can define ONE of: html | text | shape | src\n# Optional: color, rotationDeg, pos, size, fontSize, id, attrs\ntimeline = [\n    {\n        \"targets\": [\n            {\"text\": \"O\", \"color\": \"blue\"},\n            {\"text\": \"O\", \"color\": \"blue\"},\n        ],\n        \"distractors\": [\n            {\"text\": \"O\", \"color\": \"red\"},\n            {\"text\": \"Q\", \"color\": \"blue\"},\n            {\"text\": \"Q\", \"color\": \"red\"},\n        ],\n        # blue Os\n    },\n    {\n        \"targets\": [\n            {\"shape\": \"square\", \"color\": \"red\"},\n            {\"shape\": \"square\", \"color\": \"blue\"},\n        ],\n        \"distractors\": [\n            {\"shape\": \"triangle\", \"color\": \"red\"},\n            {\"shape\": \"circle\", \"color\": \"blue\"},\n            {\"shape\": \"triangle\", \"color\": \"blue\"},\n        ],\n        # squares\n    },\n    {\n        \"targets\": [\n            {\"html\": \"<b>?</b>\", \"color\": \"red\"},\n            {\"html\": \"<b>!</b>\", \"color\": \"blue\"},\n        ],\n        \"distractors\": [\n            {\"html\": \"?\", \"color\": \"red\"},\n            {\"html\": \"!\", \"color\": \"blue\"},\n            {\"html\": \"!\", \"color\": \"blue\"},\n        ],\n        # bold punctuation\n    },\n    {\n        \"targets\": [\n            {\"src\": \"https://dummyimage.com/256x256/ffffff/000000&text=T1\"},\n            {\"src\": \"https://dummyimage.com/256x256/ffffff/000000&text=T2\"},\n        ],\n        \"distractors\": [\n            {\"src\": \"https://dummyimage.com/256x256/ffffff/000000&text=D1\"},\n            {\"src\": \"https://dummyimage.com/256x256/ffffff/000000&text=D2\"},\n            {\"src\": \"https://dummyimage.com/256x256/ffffff/000000&text=D3\"},\n        ],\n        # Ts\n    },\n]\n\n# Instruction screen before each foraging trial (like your Text “response window” in RSVP)\ninstructions = Text(\n    text=\"Collect ALL targets as fast as you can. \"\n    \"Distractors will jiggle. Tap/click targets to collect.\",\n    duration=1500,  # auto-advance after 1.5s\n)\n\n# Foraging stimulus:\n# - Defaults: random non-overlapping placement inside a centered arena,\n#   black bg, end_when_found=True, trial_duration=None.\nforaging = Foraging(\n    targets=TimelineVariable(\"targets\"),\n    distractors=TimelineVariable(\"distractors\"),\n)\n\n# Put them together\nstimulus_sequence = [instructions, foraging]\n\nblock = Block(stimulus_sequence, timeline=timeline)\nexp = Experiment([block])\n\n# Will use your HTML preamble (already loading @sweet-jspsych/plugin-foraging)\nexp.to_html(\"foraging.html\")\n"
    }
  ],
  "gabor": [
    {
      "filename": "gabor.py",
      "relpath": "docs/Stimuli/gabor/gabor.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus.Gabor import Gabor\n\ngabor_1 = Gabor(\n    canvas_width=900,\n    canvas_height=540,\n    bg_gray=0.5,\n    gamma=1.0,\n    patches=[\n        # left\n        dict(\n            x_px=-220,\n            y_px=0,\n            sigma_px=42,\n            sf_cpp=0.02,\n            orientation_deg=45,\n            phase_deg=0,\n            contrast=0.40,\n            label=\"left\",\n        ),\n        # right\n        dict(\n            x_px=220,\n            y_px=0,\n            sigma_px=42,\n            sf_cpp=0.02,\n            orientation_deg=135,\n            phase_deg=180,\n            contrast=0.55,\n            label=\"right\",\n        ),\n    ],\n    response_keys=[\"f\", \"j\"],\n    keymap_to_patch_index={\"f\": 0, \"j\": 1},\n    end_on_response=True,\n    duration=750,  # alias for trial_duration\n)\n\ngabor_2 = Gabor(\n    patches=[\n        dict(\n            x_px=0,\n            y_px=0,\n            sigma_px=20,\n            sf_cpp=0.02,\n            orientation_deg=0,\n            phase_deg=0,\n            contrast=0.55,\n        )\n    ]\n)\n\nblock = Block([gabor_1, gabor_2])\nexperiment = Experiment([block])\nexperiment.to_html(\"gabor.html\")\n"
    }
  ],
  "generic": [],
  "htmlkeyboardresponse": [
    {
      "filename": "htmlkeyboardresponse.py",
      "relpath": "docs/Stimuli/htmlkeyboardresponse/htmlkeyboardresponse.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus import HtmlKeyboardResponse\n\nstim = HtmlKeyboardResponse(\n    duration=2000,\n    stimulus=\"<p style='font-size:48px; color:pink'>Hello, World!</p>\",\n)\n\nblock = Block([stim])\nexperiment = Experiment([block])\nexperiment.to_html(\"htmlkeyboardresponse.html\")\n"
    }
  ],
  "text": [
    {
      "filename": "text.py",
      "relpath": "docs/Stimuli/text/text.py",
      "code": "\"\"\"\nThe text 'press a or b or wait' is shown in pink for 2000ms. The allowed responses are 'a' and 'b'.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Text\n\n# EVENT SEQUENCE\n\ntext = Text(\n    duration=2000, text=\"press a or b or wait\", color=\"pink\", choices=[\"a\", \"b\"]\n)\n\n\nevent_sequence = [text]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\nexperiment = Experiment([block])\n\nexperiment.to_html(\"text.html\")\n"
    }
  ],
  "blank": [],
  "fixation": [],
  "feedback": [],
  "flanker": [
    {
      "filename": "flanker.py",
      "relpath": "docs/Stimuli/flanker/flanker.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Blank, Feedback, Fixation, Flanker\nfrom sweetbean.variable import TimelineVariable\n\ntimeline = [\n    {\"direction\": \"left\", \"distractor\": \"right\", \"correct_key\": \"f\"},\n    {\"direction\": \"right\", \"distractor\": \"right\", \"correct_key\": \"j\"},\n    {\"direction\": \"left\", \"distractor\": \"left\", \"correct_key\": \"f\"},\n    {\"direction\": \"right\", \"distractor\": \"left\", \"correct_key\": \"j\"},\n]\n\ndirection = TimelineVariable(\"direction\")\ndistractor = TimelineVariable(\"distractor\")\ncorrect_key = TimelineVariable(\"correct_key\")\n\nfixation = Fixation(1000)\nso_s = Blank(400)\nflanker = Flanker(2000, direction, distractor, [\"j\", \"f\"], correct_key)\nso_f = Blank(300)\nfeedback = Feedback(800, window=2)\n\nblock = Block([fixation, so_s, flanker, so_f, feedback], timeline)\n\n# Create an image of the stimuli sequence of the block\nblock.to_image(\n    \"flanker.png\",\n    data=[None, None, {\"correct\": True}, None, None],\n    zoom_factor=[3, 3, 1, 3, 3],\n    sequence=True,\n)\n\n# Create an HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"flanker.html\")\n"
    }
  ],
  "symbol": [
    {
      "filename": "symbols.py",
      "relpath": "docs/Stimuli/symbols/symbols.py",
      "code": "\"\"\"\nFirst, a welcoming text, 'Welcome! We show some Symbols. Press SPACE to continue' is shown until\nthe participant presses the Spacebar. Then a square in purple is followed by a triangle in red\nfollowed by a circle in green. All of these symbols are shown for 3000ms or until the participant\npresses the key f or j. The correct key for the purple square and the red triangle is f, and\nthe correct key for the green circle is j.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Symbol, Text\n\n# EVENT SEQUENCE\n\nstim_1 = Text(\n    text=\"Welcome! We show some Symbols. Press SPACE to continue\",\n    choices=[\" \"],\n)\n\nstim_2 = Symbol(\n    duration=3000, symbol=\"square\", color=\"#f0f\", choices=[\"f\", \"j\"], correct_key=\"f\"\n)\n\nstim_3 = Symbol(\n    duration=3000, symbol=\"triangle\", color=\"red\", choices=[\"f\", \"j\"], correct_key=\"f\"\n)\n\nstim_4 = Symbol(\n    duration=3000, symbol=\"circle\", color=\"green\", choices=[\"f\", \"j\"], correct_key=\"j\"\n)\n\nevent_sequence = [stim_1, stim_2, stim_3, stim_4]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\n\n# Create an image of the stimuli sequence of the block\nblock.to_image(path=\"symbols.png\", data=None, zoom_factor=[1, 3, 3, 3])\n\n# Create an HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"symbols.html\")\n"
    }
  ],
  "image": [
    {
      "filename": "image.py",
      "relpath": "docs/Stimuli/image/image.py",
      "code": "from sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Image\n\nstim_1 = Image(\n    stimulus=\"https://media.istockphoto.com/id/120492078/photo/\"\n    \"banana.jpg?s=1024x1024&w=is&k=20&c=M9KLVNgqLft_btWgSu0iZAmdv2asI11Qel-6fsQK140=\",\n    choices=[\" \"],\n)\n\nblock = Block([stim_1])\n\n# Create an image of the stimulus\nblock.to_image(\"./\", data=None, sequence=False, timeline_idx=\"random\", zoom_factor=1)\n\n# Create an HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"image.html\")\n"
    },
    {
      "filename": "image_language.py",
      "relpath": "docs/Stimuli/image/image_language.py",
      "code": "\"\"\"\nThis script demonstrates how to use the `run_on_language` method to run an experiment\nwith image stimuli.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Image\n\nstim_1 = Image(\n    stimulus=\"https://media.istockphoto.com/id/120492078/photo/\"\n    \"banana.jpg?s=1024x1024&w=is&k=20&c=M9KLVNgqLft_btWgSu0iZAmdv2asI11Qel-6fsQK140=\",\n    choices=[\" \"],\n)\n\nblock = Block([stim_1])\nexperiment = Experiment([block])\n\n# To make this work, there is a file called image_prompts.json in the same directory as this\n# script with the following content:\n# {\n# \"https://media.istockphoto.com/id/120492078/photo/banana.jpg?s=1024x1024&w=is&k=20&c=M9KLVNgqLft_btWgSu0iZAmdv2asI11Qel-6fsQK140=\": \"You see a picture of a banana.\"   # noqa: E501\n# }\n\nexperiment.run_on_language()\n"
    }
  ],
  "randomobjectkinematogram": [
    {
      "filename": "randomobjectkinematogram.py",
      "relpath": "docs/Stimuli/randomobjectkinematogram/randomobjectkinematogram.py",
      "code": "\"\"\"\nThe rok presents orientated objects (triangles).\n50% of them move in an angle of 100deg and 50% randomly.\n90% of them are orientated to the right and 10% randomly.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import RandomObjectKinematogram\n\n# EVENT SEQUENCE\n\nrok = RandomObjectKinematogram(\n    duration=3000,\n    number_of_oobs=500,\n    coherent_movement_direction=100,\n    coherent_orientation=0,\n    coherence_movement=50,\n    coherence_orientation=90,\n    movement_speed=10,\n)\n\nevent_sequence = [rok]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\n\n# Create an image of the stimuli\nblock.to_image(\"./\", data=None, sequence=False, timeline_idx=\"random\", zoom_factor=1)\n\n# Create an HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"randomobjectkinematogram.html\")\n"
    }
  ],
  "randomdotpatterns": [
    {
      "filename": "randomdotpatterns.py",
      "relpath": "docs/Stimuli/randomdotpatterns/randomdotpatterns.py",
      "code": "# -*- coding: utf-8 -*-\n\"\"\" Weber Fechner\n\nAn example for Weber Fechner.  Here, we have a simple stimulus timeline:\n[fixation, blank, rdp, blank, feedback]\n\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Blank, Feedback, Fixation, RandomDotPatterns\nfrom sweetbean.variable import TimelineVariable\n\ntimeline = [\n    {\"S1\": 40, \"S2\": 70, \"correct_key\": \"y\"},\n    {\"S1\": 70, \"S2\": 70, \"correct_key\": \"n\"},\n    {\"S1\": 70, \"S2\": 40, \"correct_key\": \"y\"},\n    {\"S1\": 70, \"S2\": 70, \"correct_key\": \"n\"},\n    {\"S1\": 40, \"S2\": 70, \"correct_key\": \"y\"},\n    {\"S1\": 70, \"S2\": 40, \"correct_key\": \"y\"},\n    {\"S1\": 40, \"S2\": 40, \"correct_key\": \"n\"},\n    {\"S1\": 40, \"S2\": 40, \"correct_key\": \"n\"},\n    {\"S1\": 40, \"S2\": 40, \"correct_key\": \"n\"},\n    {\"S1\": 70, \"S2\": 40, \"correct_key\": \"y\"},\n]\n\nfixation = Fixation(800)\n\nblank_1 = Blank(400)\nblank_2 = Blank(1000)\n\ns1 = TimelineVariable(\"S1\")\ns2 = TimelineVariable(\"S2\")\ncorrect_key = TimelineVariable(\"correct_key\")\n\n# We can use these variables in the stimuli declaration:\n\nrdp = RandomDotPatterns(\n    duration=1000,\n    number_of_oobs=[s1, s2],\n    number_of_apertures=2,\n    choices=[\"y\", \"n\"],\n    correct_key=correct_key,\n)\n\n\nfeedback = Feedback(500, window=2)\n\nevent_sequence = [fixation, blank_1, rdp, blank_2, feedback]\n\nblock = Block(event_sequence, timeline)\n\n# Create an image of the stimuli sequence of the block\nblock.to_image(\n    \"weber_fechner.png\",\n    data=[None, None, {\"correct\": True}, None, None],\n    zoom_factor=[3, 3, 1, 3, 3],\n    sequence=True,\n)\n\n# Create an HTML file of the experiment\nexperiment = Experiment([block])\nexperiment.to_html(\"weber_fechner.html\")\n"
    }
  ],
  "rsvp": [
    {
      "filename": "rsvp.py",
      "relpath": "docs/Stimuli/rsvp/rsvp.py",
      "code": "from sweetbean.block import Block\nfrom sweetbean.experiment import Experiment\nfrom sweetbean.stimulus import RSVP, Feedback, Text\nfrom sweetbean.variable import TimelineVariable\n\ntimeline = [\n    {\n        \"left_stream\": [\"O\", \"O\", \"Q\", \"Q\", \"O\", \"Q\"],\n        \"right_stream\": [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n        \"left_target_index\": 4,  # zero-based index\n        \"left_target_shape\": \"circle\",\n        \"right_target_index\": 4,\n        \"right_target_shape\": \"square\",\n        \"correct_key\": \"o\",\n    },\n    {\n        \"left_stream\": [\"O\", \"Q\", \"Q\", \"O\", \"Q\", \"O\"],\n        \"right_stream\": [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n        \"left_target_index\": 2,\n        \"left_target_shape\": \"circle\",\n        \"right_target_index\": 2,\n        \"right_target_shape\": \"square\",\n        \"correct_key\": \"q\",\n    },\n    {\n        \"left_stream\": [\"O\", \"O\", \"Q\", \"O\", \"O\", \"O\"],\n        \"right_stream\": [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n        \"left_target_index\": 2,\n        \"left_target_shape\": \"square\",\n        \"right_target_index\": 2,\n        \"right_target_shape\": \"circle\",\n        \"correct_key\": \"2\",\n    },\n]\n\nrsvp = RSVP(\n    streams=[\n        {\"id\": \"left\", \"items\": TimelineVariable(\"left_stream\")},\n        {\"id\": \"right\", \"items\": TimelineVariable(\"right_stream\")},\n    ],\n    stimulus_duration=200,\n    isi=40,\n    targets=[\n        {\n            \"stream_id\": \"left\",\n            \"index\": TimelineVariable(\"left_target_index\"),\n            \"shape\": TimelineVariable(\"left_target_shape\"),\n        },\n        {\n            \"stream_id\": \"right\",\n            \"index\": TimelineVariable(\"right_target_index\"),\n            \"shape\": TimelineVariable(\"right_target_shape\"),\n        },\n    ],\n)\nresponse_window = Text(\n    text=\"What was the circled symbol?\",\n    choices=[\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"0\",\n    ],\n    correct_key=TimelineVariable(\"correct_key\"),\n)\n\nfeedback = Feedback(duration=300)\n\nstimulus_sequence = [rsvp, response_window, feedback]\n\nblock = Block(stimulus_sequence, timeline=timeline)\nexp = Experiment([block])\nexp.to_html(\"rsvp.html\")\n"
    }
  ],
  "textsurvey": [
    {
      "filename": "textsurvey.py",
      "relpath": "docs/Stimuli/textsurvey/textsurvey.py",
      "code": "\"\"\"\nAfter the participant is greeted with 'Welcome! We show a survey. Press SPACE to continue' until\nthey press the spacebar, they are asked free-from questions about how old they are, their gender,\nand their handedness.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Text, TextSurvey\n\n# EVENT SEQUENCE\n\nstim_1 = Text(\n    text=\"Welcome! We show a survey. Press SPACE to continue\",\n    choices=[\" \"],\n)\n\nstim_2 = TextSurvey(\n    questions=[\"How old are you?\", \"What is your gender?\", \"What is your handedness?\"]\n)\n\nevent_sequence = [stim_1, stim_2]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\nexperiment = Experiment([block])\nexperiment.to_html(\"textsurvey.html\")\n"
    }
  ],
  "multichoicesurvey": [
    {
      "filename": "multiplechoice.py",
      "relpath": "docs/Stimuli/multichoicesurvey/multiplechoice.py",
      "code": "\"\"\"\nAfter the participant is greeted with 'Welcome! We show a survey. Press SPACE to continue' until\nthey press the spacebar, they are asked two multiple-choice questions. One is about how they are,\nwhich they can rate as bad, good, or fine. The other is about their handedness.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import MultiChoiceSurvey, Text\n\n# EVENT SEQUENCE\n\nstim_1 = Text(\n    text=\"Welcome! We show a survey. Press SPACE to continue\",\n    choices=[\" \"],\n)\n\nstim_2 = MultiChoiceSurvey(\n    questions=[\n        {\"prompt\": \"How are you?\", \"options\": [\"bad\", \"good\", \"fine\"]},\n        {\n            \"prompt\": \"What is your handedness?\",\n            \"options\": [\"left\", \"right\", \"other\", \"prefer not to say\"],\n        },\n    ]\n)\n\nevent_sequence = [stim_1, stim_2]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\nexperiment = Experiment([block])\nexperiment.to_html(\"multichoice.html\")\n"
    }
  ],
  "likertsurvey": [
    {
      "filename": "likertsurvey.py",
      "relpath": "docs/Stimuli/likertsurvey/likertsurvey.py",
      "code": "\"\"\"\nA welcoming text the participant is shown until the participant presses the spacebar. The text says,\n'Welcome! We show a survey. Press SPACE to continue'. This is followed by a survey with two\nquestions that the participant is supposed to answer on a likert scale. The first question is\n'How are you feeling?' and the participant is supposed to rate their feeling on a scale from\n-2 to 2 with 5 levels. The second question is 'Do you like this tool?' on a scale from 1 to 3.\nThen, the participant is supposed to rate five animals on their cuteness from 1 to 5.\nThe animals are a bunny, a shark, a spider, a cat, and a dog.\n\"\"\"\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import LikertSurvey, Text\n\n# EVENT SEQUENCE\n\nstim_1 = Text(\n    text=\"Welcome! We show a survey. Press SPACE to continue\",\n    choices=[\" \"],\n)\n\nstim_2 = LikertSurvey(\n    questions=[\n        {\"prompt\": \"How are you feeling?\", \"labels\": [-2, -1, 0, 1, 2]},\n        {\"prompt\": \"Do you like this tool?\", \"labels\": [0, 1, 3]},\n    ]\n)\n\nstim_3 = Text(\n    text=\"Rate the following animals on a scale from 1-5 on their cuteness.\",\n    choices=[\" \"],\n)\n\nstim_4 = LikertSurvey.from_scale(\n    prompts=[\"bunny\", \"shark\", \"spider\", \"cat\", \"dog\"], scale=[1, 2, 3, 4, 5]\n)\n\nevent_sequence = [stim_1, stim_2, stim_3, stim_4]\n\n# BLOCK DESIGN\n\nblock = Block(event_sequence)\nexperiment = Experiment([block])\nexperiment.to_html(\"likertsurvey.html\")\n"
    }
  ],
  "video": [
    {
      "filename": "video.py",
      "relpath": "docs/Stimuli/video/video.py",
      "code": "# docs/Stimuli/video/basic.py\n\nfrom sweetbean import Block, Experiment\nfrom sweetbean.stimulus import Text, Video\n\n# Gate: require a keypress so browsers allow autoplay\ngate = Text(\n    text=\"Press SPACE to start the videos\",\n    color=\"white\",\n    choices=[\" \"],  # spacebar\n    duration=None,\n)\n\n\n# Example 1 — play a video from a URL; trial ends when the video finishes.\nvideo_trial = Video(\n    stimulus=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\",\n    choices=[\"f\", \"j\"],  # collect keypress during playback\n    trial_ends_after_video=True,  # end automatically at video end\n    autoplay=True,\n    controls=False,\n    width=640,\n    height=360,\n)\n\n# Example 2 — allow a 2s response window after the video ends.\npost_window = Video(\n    stimulus=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\",\n    choices=[\"f\", \"j\"],\n    trial_ends_after_video=False,  # don't end on finish\n    duration=2000,  # alias for trial_duration (keeps trial alive 2s)\n    autoplay=True,\n    controls=False,\n)\n\n# Example 3 — multiple sources (browser compatibility); still OK with URLs.\nmulti_source = Video(\n    stimulus=[\n        \"https://media.w3.org/2010/05/sintel/trailer.webm\",\n        \"https://media.w3.org/2010/05/sintel/trailer.mp4\",\n    ],\n    choices=[\"f\", \"j\"],\n    trial_ends_after_video=True,\n    autoplay=True,\n    controls=True,\n)\n\nblock = Block([gate, video_trial, post_window, multi_source])\nexperiment = Experiment([block])\nexperiment.to_html(\"video.html\")\n"
    }
  ]
}