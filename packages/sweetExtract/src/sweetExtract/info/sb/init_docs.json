{
  "htmlchoice": {
    "class_name": "HtmlChoice",
    "signature": "__init__(self, duration=None, html_array=None, values=None, time_after_response=3000, side_effects=None)",
    "init_docstring": "Arguments:\n    duration (int | None): Stimulus display time in ms. If None, runs until a choice is\n        made.\n    html_array (list): List of HTML strings to display as clickable options. Must align 1:1\n        with `values`.\n    values (list): List of opaque values (numbers/strings/objects) mapped to `html_array`\n        items. The selected entry is emitted as both `value` and `bean_value`.\n    time_after_response (int): Extra time in ms after a click before ending the trial\n        (useful for short animations/visual confirmation).\n    side_effects (dict | None): Optional side-effect configuration passed through to the\n    runtime.\n\nEmits (adds to jsPsych data):\n    - choice (int): 0-based index of the clicked item\n    - value (any): the corresponding entry from `values`\n    - bean_response (int): copy of `choice` for downstream consistency\n    - bean_value (any): copy of `value`\n\nNotes:\n    - `len(html_array)` should equal `len(values)`. Empty lists are allowed but will yield\n        no clickable options.\n    - This stimulus collects responses via mouse/touch clicks on the provided elements.",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Choice.py"
  },
  "bandit": {
    "class_name": "Bandit",
    "signature": "__init__(self, duration=None, bandits=None, time_after_response=2000, side_effects=None)",
    "init_docstring": "Arguments:\n    duration (int | None): Stimulus display time in ms. If None, runs until a bandit is\n        chosen.\n    bandits (list): List of dicts, each with:\n        - color (str): CSS color to outline the square\n        - value (any): payout/label recorded when the bandit is chosen\n    time_after_response (int): Extra time in ms after a click for “slot machine” animation.\n    side_effects (dict | None): Optional side-effect configuration.\n\nLayout & styling:\n    - Squares are arranged in a near-square grid (rows × cols) computed from N.\n    - CSS custom properties are set before the trial:\n        --slotmachine-time, --slotmachine-time-after  (both ~ time_after_response/2)\n\nEmits (adds to jsPsych data) — same as HtmlChoice:\n    - choice (int), value (any), bean_response (int), bean_value (any)",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Choice.py"
  },
  "foraging": {
    "class_name": "Foraging",
    "signature": "__init__(self, targets=None, distractors=None, position_mode='random', grid_cols=None, grid_rows=None, ring_radius_vmin=30, randomize_positions=True, arena_size_vmin=92, placement_inset_vmin=6, min_gap_vmin=2.5, background='#000000', color='#ffffff', token_box_size='12vmin', token_font_size='10vmin', overlay_pool=None, rotation_pool=None, trial_duration=None, end_when_found=True, response_ends_trial=False, seed=None, show_star_feedback=False, star_color='#f6b500', triggers=None, duration=None, side_effects=None)",
    "init_docstring": "Arguments:\n    targets (list[dict] | TimelineVariable | None):\n        Trial’s target items. Accepts a concrete list or a TimelineVariable\n        that evaluates per trial to a list. Each item is an ItemSpec dict\n        that defines exactly ONE of {html | text | shape | src} plus\n        optional styling/placement fields:\n\n          Content (choose exactly one)\n          - html (str): Raw HTML.\n          - text (str): Plain text (rendered in a token box).\n          - shape (str): One of \"circle\", \"square\", \"triangle\".\n          - src (str): Image URL/path.\n\n          Optional appearance/identity\n          - color (str): CSS color; overrides overlay_pool sampling.\n          - rotationDeg (int): Rotation in degrees; overrides rotation_pool.\n          - size (str): CSS size of the token box (e.g., \"12vmin\").\n          - fontSize (str): For text content (e.g., \"10vmin\").\n          - id (str): Opaque label copied to data.\n          - attrs (dict[str,str]): Arbitrary HTML attributes.\n\n          Placement override (optional; else global placement rules apply)\n          - pos (dict): One of the following shapes:\n                {\"mode\": \"abs\", \"x_vmin\": <float>, \"y_vmin\": <float>}\n                {\"mode\": \"grid\", \"row\": <int>, \"col\": <int>}\n                {\"mode\": \"circle\", \"angle_deg\": <float>, \"radius_vmin\": <float>}\n\n    distractors (list[dict] | TimelineVariable | None):\n        Same ItemSpec structure as `targets`. May be empty.\n\n    position_mode (str):\n        Global placement policy when items don’t provide an explicit `pos`.\n        One of \"random\" | \"grid\" | \"circle\". Default \"random\".\n    grid_cols (int | None):\n        Number of columns for \"grid\" placement. If None, inferred from count.\n    grid_rows (int | None):\n        Number of rows for \"grid\" placement. If None, inferred from count.\n    ring_radius_vmin (float):\n        Ring radius for \"circle\" placement, in vmin units. Default 30.\n    randomize_positions (bool):\n        If True, jitter positions within the grid cell / along the ring for\n        \"grid\"/\"circle\" modes. Default True.\n\n    arena_size_vmin (float):\n        Side length (vmin) of the centered square arena. Default 92.\n    placement_inset_vmin (float):\n        Inner safety margin from arena edges. Default 6.\n    min_gap_vmin (float):\n        Extra minimum pairwise spacing between item centers. Default 2.5.\n\n    background (str):\n        Arena background color. Default \"#000000\".\n    color (str):\n        Default foreground color (text/borders). Default \"#ffffff\".\n    token_box_size (str):\n        Default token box size (CSS). Default \"12vmin\".\n    token_font_size (str):\n        Default font size for text tokens (CSS). Default \"10vmin\".\n\n    overlay_pool (list[str] | None):\n        Optional pool of overlay symbols/colors; sampled per item unless the\n        ItemSpec provides an explicit `color`. Omit/None to use plugin defaults.\n    rotation_pool (list[int] | None):\n        Optional pool of rotations in degrees; sampled per item unless the\n        ItemSpec provides `rotationDeg`. Omit/None to use plugin defaults.\n\n    trial_duration (int | None):\n        Hard timeout in ms. If None and `end_when_found=True`, the trial ends\n        when all targets are collected. Default None.\n    end_when_found (bool):\n        If True, automatically end the trial once all targets are found.\n        Default True.\n    response_ends_trial (bool):\n        If True, any user interaction that counts as a response ends the trial,\n        even if not all targets are collected. Default False.\n\n    seed (int | None):\n        Seed for deterministic placement/sampling. Default None.\n\n    show_star_feedback (bool):\n        If True, briefly show a star animation on successful target clicks.\n        Default False.\n    star_color (str):\n        Star feedback color. Default \"#f6b500\".\n\n    triggers (dict | None):\n        Optional event→action mapping, e.g.,\n        {\"on_all_targets_collected\": \"end_trial\"}.\n        Default: {\"on_all_targets_collected\": \"end_trial\"}.\n\n    duration (int | None):\n        SweetBean convenience alias mirrored to `trial_duration` during build\n        (consistent with RSVP). If provided, `trial_duration` is set to this\n        value. Default None.\n    side_effects (dict | None):\n        Optional side-effect configuration passed through to the runtime.\n\nEmits (added to jsPsych data):\n    - clicks (list[dict]): Raw click events ({kind, index, id?, t}).\n    - n_targets (int): Number of target items in the trial.\n    - n_collected (int): Number of targets collected.\n    - tps (list[number]): Timestamps for target pickups.\n    - bean_clicks (list[dict]): Mirror of `clicks`.\n    - bean_n_targets (int): Mirror of `n_targets`.\n    - bean_n_found (int): Mirror of `n_collected`.\n    - bean_tps (list[number]): Mirror of `tps`.\n    - bean_all_found (bool): Convenience flag (n_collected >= n_targets).\n\nNotes:\n    - Provide item-level `pos` to bypass global placement for specific items.\n    - If both `duration` and `trial_duration` are given, `duration` takes\n      precedence by being copied into `trial_duration`.\n    - Null/None optionals are dropped so the plugin falls back to its defaults.\n\nExample:\n    from sweetbean import Block, Experiment\n    from sweetbean.variable import TimelineVariable\n\n    timeline = [\n        {\n            \"targets\": [\n                {\"text\": \"T\", \"color\": \"#66ff66\"},\n                {\"shape\": \"circle\", \"color\": \"#66ff66\"},\n            ],\n            \"distractors\": [\n                {\"text\": \"L\", \"color\": \"#ff6666\"},\n                {\"shape\": \"square\", \"color\": \"#ff6666\"},\n                {\"shape\": \"triangle\", \"color\": \"#ff6666\"},\n            ],\n        }\n    ]\n\n    stim = Foraging(\n        targets=TimelineVariable(\"targets\"),\n        distractors=TimelineVariable(\"distractors\"),\n        position_mode=\"grid\",\n        grid_cols=6, grid_rows=4,\n        arena_size_vmin=90, min_gap_vmin=2.5,\n        background=\"#000000\", color=\"#ffffff\",\n        token_box_size=\"10vmin\", token_font_size=\"8vmin\",\n        end_when_found=True, response_ends_trial=False,\n        show_star_feedback=True, star_color=\"#f6b500\",\n    )\n\n    block = Block([stim], timeline=timeline)\n    Experiment([block]).to_html(\"foraging.html\")",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Foraging.py"
  },
  "gabor": {
    "class_name": "Gabor",
    "signature": "__init__(self, patches=None, canvas_width=800, canvas_height=600, bg_gray=0.5, px_per_deg=None, gamma=1.0, trial_duration=None, timeout_ms=None, end_on_response=True, response_keys=None, allow_mouse=True, keymap_to_patch_index=None, duration=None, side_effects=None)",
    "init_docstring": "Arguments:\n    patches (list[dict] | TimelineVariable | None):\n        The Gabor patch specification for this trial. Accepts either a\n        concrete list or a TimelineVariable that evaluates per trial to a\n        list. Each patch dict supports:\n\n          Required geometry/appearance\n          - x_px (float): X center in pixels, relative to canvas center.\n          - y_px (float): Y center in pixels, relative to canvas center.\n          - orientation_deg (float): Orientation in degrees [0..180).\n          - contrast (float): Michelson contrast in [0..1].\n          - phase_deg (float): Phase in degrees [0..360).\n\n          Spatial frequency (choose one)\n          - sf_cpp (float): Cycles per pixel, OR\n          - sf_cpd (float): Cycles per degree (requires px_per_deg).\n\n          Gaussian size (choose one)\n          - sigma_px (float): Sigma in pixels, OR\n          - sigma_deg (float): Sigma in degrees (requires px_per_deg).\n\n          Optional\n          - size_px (int): Square draw size in px (defaults to ~6*sigma_px).\n          - label (str): Arbitrary tag copied to data.\n\n        Example single patch:\n        {\n            \"x_px\": 0.0, \"y_px\": 0.0,\n            \"orientation_deg\": 45, \"contrast\": 0.5, \"phase_deg\": 0,\n            \"sf_cpd\": 3.0,   # uses px_per_deg if provided\n            \"sigma_deg\": 0.4 # uses px_per_deg if provided\n        }\n\n    canvas_width (int):\n        Canvas width in pixels. Default 800.\n    canvas_height (int):\n        Canvas height in pixels. Default 600.\n    bg_gray (float):\n        Mean background luminance in [0..1]. Default 0.5.\n    px_per_deg (float | None):\n        Pixels per degree for converting *deg* fields (sigma_deg, sf_cpd)\n        to pixels. If None, deg-based fields are not allowed. Default None.\n    gamma (float):\n        Gamma correction factor for display (1.0 = no correction). Default 1.0.\n\n    trial_duration (int | None):\n        Hard timeout (ms) for the trial. None = no forced timeout. Default None.\n    timeout_ms (int | None):\n        Alias for trial_duration; if set, this takes precedence. Default None.\n    end_on_response (bool):\n        If True, end the trial immediately after a valid response. Default True.\n\n    response_keys (list[str] | None):\n        Allowed keys. If None, defaults to [\"ArrowLeft\", \"ArrowRight\"] to\n        match the plugin’s default. Keys can be remapped with\n        keymap_to_patch_index.\n    allow_mouse (bool):\n        If True, clicking selects the nearest patch center. Default True.\n    keymap_to_patch_index (dict[str, int] | None):\n        Optional explicit key→patch index map (e.g., {\"f\":0, \"j\":1}).\n        If omitted, the plugin can infer a side-based mapping for arrow keys.\n\n    duration (int | None):\n        SweetBean convenience alias mirrored to `trial_duration` during build.\n        If provided, `trial_duration` is set to this value. Default None.\n    side_effects (dict | None):\n        Optional side-effect configuration passed to the runtime.\n\nEmits (added to jsPsych data):\n    - bean_rt (number | None): Reaction time in ms.\n    - bean_resp_key (str | None): Key pressed, if any.\n    - bean_resp_side (str | None): Side label derived by the plugin, if any.\n    - bean_chosen_patch (int | None): Selected patch index (0-based).\n    - bean_n_patches (int): Number of patches rendered.\n    - bean_patches (list[dict]): Patch descriptors used on this trial.\n    - bean_onset_ms / bean_offset_ms (number | None): Timing markers.\n\nNotes:\n    - Provide either pixel- or degree-based size/frequency per patch\n      (sigma_px vs sigma_deg, sf_cpp vs sf_cpd). Degree-based fields require\n      `px_per_deg` to be set.\n    - Use TimelineVariable(\"patches\") if patches vary per trial.\n    - If both `duration` and `trial_duration` are given, `duration` is copied\n      into `trial_duration` (matching other SweetBean stimuli).\n    - Null/None optionals are dropped to let the plugin use its internal defaults.\n\nExample:\n    from sweetbean import Block, Experiment\n    from sweetbean.variable import TimelineVariable\n    timeline = [\n        {\n            \"patches\": [\n                {\n                    \"x_px\": -150, \"y_px\": 0,\n                    \"orientation_deg\": 30, \"contrast\": 0.6, \"phase_deg\": 0,\n                    \"sf_cpd\": 2.5, \"sigma_deg\": 0.3,  # requires px_per_deg\n                    \"label\": \"left\"\n                },\n                {\n                    \"x_px\": 150, \"y_px\": 0,\n                    \"orientation_deg\": 120, \"contrast\": 0.6, \"phase_deg\": 90,\n                    \"sf_cpd\": 2.5, \"sigma_deg\": 0.3,\n                    \"label\": \"right\"\n                },\n            ]\n        }\n    ]\n    stim = Gabor(\n        patches=TimelineVariable(\"patches\"),\n        canvas_width=800, canvas_height=600,\n        bg_gray=0.5, px_per_deg=40.0, gamma=1.0,\n        trial_duration=None, end_on_response=True,\n        response_keys=[\"f\",\"j\"],\n        keymap_to_patch_index={\"f\":0, \"j\":1},\n    )\n    block = Block([stim], timeline=timeline)\n    Experiment([block]).to_html(\"gabor.html\")",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Gabor.py"
  },
  "generic": {
    "class_name": "Generic",
    "signature": "__init__(self, side_effects=None, **kwargs)",
    "init_docstring": null,
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Generic.py"
  },
  "htmlkeyboardresponse": {
    "class_name": "HtmlKeyboardResponse",
    "signature": "__init__(self, duration=None, stimulus='', choices=None, correct_key='', side_effects=None)",
    "init_docstring": null,
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "text": {
    "class_name": "Text",
    "signature": "__init__(self, duration=None, text='', color='white', choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    text: the text should be presented\n    color: the color of the text\n    choices: the keys that will be recorded if pressed\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "blank": {
    "class_name": "Blank",
    "signature": "__init__(self, duration=None, choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    choices: the keys that will be recorded if pressed\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "fixation": {
    "class_name": "Fixation",
    "signature": "__init__(self, duration=None, side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "feedback": {
    "class_name": "Feedback",
    "signature": "__init__(self, duration=None, correct_message='Correct!', false_message='False!', correct_color='green', false_color='red', window=1, side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    correct_message: the message to show if the response was correct\n    false_message: the message to show if the response was false\n    correct_color: the color of the message if the response was correct\n    false_color: the color of the message if the response was false\n    window: how far back is the stimulus to check\n            (that stimulus needs to have a choice and a correct_key parameter)\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "flanker": {
    "class_name": "Flanker",
    "signature": "__init__(self, duration=None, direction='left', distractor='left', choices=None, correct_key='', color='white', n_flankers=2, side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    direction: the direction of the target (allowed: left, right, l, r, L, R)\n    distractor: the direction of the distractor (allowed: left, right, l, r, L, R)\n    choices: the keys that will be recorded if pressed\n    correct_key: the correct key to press\n    color: the color of the text\n    n_flankers: the number of distractors\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "symbol": {
    "class_name": "Symbol",
    "signature": "__init__(self, duration=None, symbol='', color='white', choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    symbol: the symbol to show (allowed: square, triangle, circle)\n    color: the color of the symbol\n    choices: the keys that will be recorded if pressed\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/HtmlKeyboardResponse.py"
  },
  "image": {
    "class_name": "Image",
    "signature": "__init__(self, duration=None, stimulus='', choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented\n    stimulus: the path to the image\n    choices: the keys that will be recorded if pressed\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Image.py"
  },
  "randomobjectkinematogram": {
    "class_name": "RandomObjectKinematogram",
    "signature": "__init__(self, duration=None, number_of_oobs=300, number_of_apertures=1, coherent_movement_direction=180, coherent_orientation=180, coherence_movement=100, coherence_orientation=100, movement_speed=10, aperture_position_left=50, aperture_position_top=50, oob_color='white', background_color='black', stimulus_type=0, choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented // trial_duration\n    number_of_oobs: the number of oriented objects per set in the stimulus\n    number_of_apertures: the number of kinematograms\n    coherent_movement_direction: the direction of coherent motion in degrees\n        (0 degre meaning right)\n    coherent_orientation: the orientation of the objects in degree\n        (0 degree meaning right)\n    coherence_movement: the percentage of oriented objects moving in the coherent direction.\n    coherence_orientation: the percentage of oriented objects moving in the coherent\n        direction.\n    movement_speed: the movement speed of the oobs in (percentage of aperture_width)/second\n    aperture_position_left: position of midpoint of aperture in x direction in percentage\n        of window width\n    aperture_position_top: position of midpoint of aperture in y direction in percentage\n        of window height\n    oob_color: the color of the orientated objects\n    background_color: the background color\n    choices: the valid keys that the subject can press to indicate a response\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/RO.py"
  },
  "randomdotpatterns": {
    "class_name": "RandomDotPatterns",
    "signature": "__init__(self, duration=None, number_of_oobs=300, number_of_apertures=2, coherent_orientation=0, coherence_orientation=0, aperture_position_left=50, aperture_position_top=50, oob_color='white', background_color='grey', stimulus_type=1, choices=None, correct_key='', side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented // trial_duration\n    number_of_oobs: the number of oriented objects per set in the stimulus\n    number_of_apertures: the number of kinematograms\n    coherent_orientation: the orientation of the objects in degree\n        (0 degree meaning right)\n    coherence_orientation: the percentage of oriented objects moving in the coherent\n        direction.\n    aperture_position_left: position of midpoint of aperture in x direction in percentage\n        of window width\n    aperture_position_top: position of midpoint of aperture in y direction in percentage\n        of window height\n    oob_color: the color of the orientated objects\n    background_color: the background color\n    choices: the valid keys that the subject can press to indicate a response\n    correct_key: the correct key to press\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/RO.py"
  },
  "rsvp": {
    "class_name": "RSVP",
    "signature": "__init__(self, background='#000000', color='#ffffff', direction='row', stream_order=None, gap='6rem', token_box_size='18vmin', token_font_size='10vmin', token_padding='0.25em 0.45em', streams=None, stimulus_duration=100, isi=0, mask_html=None, choices='ALL', end_on_response=False, response_window=None, correct_keys=None, decorate_targets=True, target_shape='none', target_stroke='3px', targets=None, decorate_distractors=False, distractor_shape='none', distractor_color='#888888', distractor_stroke='2px', distractors=None, trial_duration=None, record_timestamps=True, duration=None, side_effects=None)",
    "init_docstring": "Arguments:\n    background:\n        CSS color for the stimulus background. Default \"#000000\".\n    color:\n        CSS color used for token text (and the default border color when not\n        otherwise specified). Default \"#ffffff\".\n    direction:\n        Stream layout: \"row\" (left–right) or \"column\" (top–bottom). Default \"row\".\n    stream_order:\n        Comma-separated order of stream IDs in the DOM (e.g., \"left,right\").\n        If omitted and there are exactly two streams in \"row\" layout, the order\n        is auto-filled from the two stream IDs.\n    gap:\n        CSS gap between streams in non-bilateral layouts. Default \"6rem\".\n\n    token_box_size:\n        CSS size for each fixed token box (prevents wobble when borders appear).\n        Default \"18vmin\".\n    token_font_size:\n        CSS font size for the characters inside each token box. Default \"10vmin\".\n    token_padding:\n        CSS padding used inside the decoration outline. Default \"0.25em 0.45em\".\n\n    streams:\n        Per-trial stream specifications. Prefer object form:\n          [\n            {\"id\": \"left\",  \"items\": [\"O\",\"Q\",\"O\",...]},\n            {\"id\": \"right\", \"items\": [\"1\",\"2\",\"3\",...]}\n          ]\n        Short forms are normalized only when obviously safe *and literal*:\n          • [\"ABQQ\",\"OOXO\"] → [{\"id\":\"left\",\"items\":[\"A\",\"B\",\"Q\",\"Q\"]}, ...]\n          • [[\"A\",\"B\"],[\"Q\",\"O\"]] → [{\"id\":\"left\",\"items\":[\"A\",\"B\"]}, ...]\n        If any element is a Variable (FunctionVariable / TimelineVariable /\n        DataVariable), the list is passed through untouched—perform any splitting\n        inside your mapping functions.\n\n    stimulus_duration:\n        Milliseconds each token is displayed. Default 100.\n    isi:\n        Inter-stimulus interval (ms) between tokens in a stream. Default 0.\n    mask_html:\n        Optional HTML string shown between tokens (e.g., \"•\"). Default None.\n\n    choices:\n        Which keys are allowed during the RSVP:\n          - \"ALL\": any key is accepted\n          - \"NO_KEYS\": keypresses are ignored during RSVP\n          - list[str]: explicit set (e.g., [\"f\",\"j\"])\n        Default \"ALL\".\n    end_on_response:\n        If True, the RSVP ends immediately after the first valid keypress.\n        This maps to the plugin’s `response_ends_trial`. Default False.\n    response_window:\n        Optional global time window in ms for responses. Per-target windows may\n        override this. Default None → unlimited.\n    correct_keys:\n        Optional comma-separated string for scoring (e.g., \"f,j\"). Default None.\n\n    decorate_targets:\n        Whether to visually decorate targets. Decoration is only visible if\n        the shape is not \"none\". Default True.\n    target_shape:\n        Default target decoration shape: \"circle\" | \"square\" | \"underline\" | \"none\".\n        This is used when a target omits `shape`. Default \"none\".\n    target_stroke:\n        CSS stroke width for target outlines (e.g., \"3px\", \"4px\"). Default \"3px\".\n    targets:\n        List of target annotations (zero-based indices). Each item:\n          {\n            \"stream_id\": str,\n            \"index\": int | Variable,\n            # optional:\n            \"label\": str,\n            \"response_window\": int | None,\n            \"correct_keys\": list[str] | \"ALL\" | None,\n            \"shape\": \"circle\"|\"square\"|\"underline\"|\"none\",\n            \"color\": str,\n            \"stroke\": str,\n            \"padding\": str,\n          }\n\n    decorate_distractors:\n        Whether to decorate explicit distractor positions. Default False.\n    distractor_shape:\n        Default distractor decoration shape if an item omits `shape`.\n        Default \"none\".\n    distractor_color:\n        Default stroke/text color for distractors when not overridden.\n        Default \"#888888\".\n    distractor_stroke:\n        Default border width for distractors (e.g., \"2px\"). Default \"2px\".\n    distractors:\n        List of explicit distractor annotations (decoration only). Each item:\n          {\n            \"stream_id\": str,\n            \"index\": int | Variable,     # if omitted and exactly one target exists,\n                                         # the index is copied from that target\n            # optional:\n            \"label\": str,\n            \"shape\": \"circle\"|\"square\"|\"underline\"|\"none\",\n            \"color\": str,\n            \"stroke\": str,\n            \"padding\": str,\n          }\n\n    trial_duration:\n        Hard stop for the RSVP (ms). If not set, the trial ends after the last\n        token (plus ISI). Default None.\n    record_timestamps:\n        If True, record per-token onset/offset times into `data.schedule`.\n        Default True.\n    duration:\n        SweetBean convenience alias; when set, it is mirrored into\n        `trial_duration`.\n    side_effects:\n        Optional dictionary of side effects to pass along at runtime.\n\nEmits (added to jsPsych trial data):\n    - bean_key (str | None): first key pressed (if any).\n    - bean_rt (number | None): RT (ms) of the first keypress.\n    - bean_any_hit (bool): whether any declared target was hit.",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/RSVP.py"
  },
  "bilateralrsvp": {
    "class_name": "BilateralRSVP",
    "signature": "__init__(self, left, right, *, target_side='left', target_index=0, target_shape='circle', distractor_index=None, distractor_shape=None, stimulus_duration=100, isi=0, choices='ALL', mask_html=None, color='#ffffff', background='#000000', token_box_size='18vmin', token_font_size='10vmin', token_padding='0.25em 0.45em', trial_duration=None, duration=None, side_effects=None)",
    "init_docstring": "Arguments:\n    left:\n        Per-trial items for the left stream (e.g., [\"O\",\"Q\",\"O\",...]) or a\n        Variable (FunctionVariable / TimelineVariable / DataVariable) that\n        evaluates to such a list.\n    right:\n        Per-trial items for the right stream or a Variable producing a list.\n\n    target_side:\n        \"left\" or \"right\". Which stream contains the target. Default \"left\".\n    target_index:\n        Zero-based index of the target within the chosen stream. May be an int\n        or a Variable. Default 0.\n    target_shape:\n        Decoration for the target: \"circle\" | \"square\" | \"underline\" | \"none\".\n        Default \"circle\".\n\n    distractor_index:\n        Optional zero-based index for an opposite-stream distractor. If either\n        `distractor_index` or `distractor_shape` is supplied, a distractor entry is\n        created on the stream opposite to `target_side`. If `distractor_index`\n        is omitted, it defaults to `target_index`.\n    distractor_shape:\n        Optional decoration shape for the distractor (\"circle\" | \"square\" |\n        \"underline\" | \"none\"). If None, the shape is not overridden (plugin\n        defaults apply).\n\n    stimulus_duration:\n        Milliseconds each token is displayed. Default 100.\n    isi:\n        Inter-stimulus interval (ms) between tokens. Default 0.\n    choices:\n        \"ALL\", \"NO_KEYS\", or list[str] of valid keys. Default \"ALL\".\n    mask_html:\n        Optional HTML mask shown between tokens. Default None.\n    color:\n        Default text/border color. Default \"#ffffff\".\n    background:\n        Background color. Default \"#000000\".\n    token_box_size:\n        CSS size for the fixed token box. Default \"18vmin\".\n    token_font_size:\n        CSS font size for token glyphs. Default \"10vmin\".\n    token_padding:\n        CSS padding inside decoration outlines. Default \"0.25em 0.45em\".\n    trial_duration:\n        Optional hard stop (ms). Default None.\n\n    duration:\n        SweetBean convenience alias; mirrored into `trial_duration` if set.\n    side_effects:\n        Optional dictionary of side effects to pass along.\n\nNotes:\n    - This is a thin wrapper that forwards to the underlying `Rsvp` implementation\n      with a simpler two-stream interface.\n    - If you need multiple targets, per-target response windows, or more complex\n      layouts, use `RSVP` instead.",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/RSVP.py"
  },
  "textsurvey": {
    "class_name": "TextSurvey",
    "signature": "__init__(self, questions=None, side_effects=None)",
    "init_docstring": "Arguments:\n    questions: a list of strings representing the questions\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Survey.py"
  },
  "multichoicesurvey": {
    "class_name": "MultiChoiceSurvey",
    "signature": "__init__(self, questions=None, side_effects=None)",
    "init_docstring": "Arguments:\n    questions: a list of dictionaries with the keys \"prompt\" and \"options\"\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Survey.py"
  },
  "likertsurvey": {
    "class_name": "LikertSurvey",
    "signature": "__init__(self, questions=None, side_effects=None)",
    "init_docstring": "Arguments:\n    questions: a list of dictionaries with the keys \"prompt\" and \"labels\"\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Survey.py"
  },
  "video": {
    "class_name": "Video",
    "signature": "__init__(self, duration=None, stimulus=None, choices=None, correct_key='', trial_ends_after_video=True, autoplay=True, controls=False, width=None, height=None, muted=True, side_effects=None)",
    "init_docstring": "Arguments:\n    duration: time in ms the stimulus is presented (alias for trial_duration)\n    stimulus: video source(s). Either a single string or a list of strings (URLs/paths).\n         You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm)\n         to maximize the cross-browser compatibility.\n    choices: keys to accept (e.g., [\"f\",\"j\"]), or \"ALL\" / \"NO_KEYS\"\n    correct_key: the correct key to press (optional)\n    trial_ends_after_video: end the trial automatically when video finishes\n    autoplay: start playback automatically\n    controls: show native video controls\n    width, height: optional pixel dimensions\n    muted: mute audio (often required for autoplay)\n    side_effects: a dictionary of side effects",
    "source_relpath": "/var/folders/1b/73431t791q1_7tb99v1jc9ww0000gp/T/sweetbean_minimal_qmu03r1c/src/sweetbean/stimulus/Video.py"
  }
}